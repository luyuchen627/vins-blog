(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{203:function(t,e,r){"use strict";r.r(e);var i=r(0),s=Object(i.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),t._v(" "),r("p",[t._v("微服务就是把一个项目拆分为微小的应用")]),t._v(" "),r("p",[t._v("简而言之，微服务架构风格是一种将单个应用程序作为一套小型服务开发的方法，每种应用程序都在自己的进程中运行，并与轻量级机制（通常是HTTP资源API）进行通信。 这些服务是围绕业务功能构建的，可以通过全自动部署机制独立部署。 这些服务的集中管理最少，可以用不同的编程语言编写，并使用不同的数据存储技术")]),t._v(" "),r("p",[t._v("SOA架构强调的是异构系统之间的通信和解耦合，而微服务架构强调的是系统按业务边界做细粒度的拆分和部署")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),r("p",[t._v("在分布式系统架构中有一个CAP理论：任何分布式系统只可同时满足一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）中的两点，没法三者兼顾，而分区容错性是基本要求")]),t._v(" "),r("p",[t._v("一致性问题：")]),t._v(" "),t._m(6),t._v(" "),r("p",[t._v("当更新操作完成之后，任何多个后续进程或者线程的访问都会返回最新的更新过的值。这种是对用户最友好的，就是用户上一次写什么，下一次就保证能读到什么。根据 CAP 理论，这种实现需要牺牲可用性。")]),t._v(" "),t._m(7),t._v(" "),r("p",[t._v("系统并不保证续进程或者线程的访问都会返回最新的更新过的值。系统在数据写入成功之后，不承诺立即可以读到最新写入的值，也不会具体的承诺多久之后可以读到。")]),t._v(" "),t._m(8),t._v(" "),r("p",[t._v("弱一致性的特定形式。系统保证在没有后续更新的前提下，系统最终返回上一次更新操作的值。在没有故障发生的前提下，不一致窗口的时间主要受通信延迟，系统负载和复制副本的个数影响。DNS 是一个典型的最终一致性系统。")]),t._v(" "),t._m(9),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/BrightMoon/p/5622614.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式消息数据一致性"),r("OutboundLink")],1)])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"微服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#微服务","aria-hidden":"true"}},[this._v("#")]),this._v(" 微服务")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"优点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优点","aria-hidden":"true"}},[this._v("#")]),this._v(" 优点")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("独立部署，灵活扩展")])]),this._v(" "),e("li",[e("p",[this._v("资源的有效隔离")])]),this._v(" "),e("li",[e("p",[this._v("利于团队组织架构的调整")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缺点","aria-hidden":"true"}},[this._v("#")]),this._v(" 缺点")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("测试复杂")])]),this._v(" "),e("li",[e("p",[this._v("数据一致性")])]),this._v(" "),e("li",[e("p",[this._v("添加服务注册和发现机制")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"数据最终一致性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据最终一致性","aria-hidden":"true"}},[this._v("#")]),this._v(" 数据最终一致性")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("强一致")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",{attrs:{start:"2"}},[e("li",[this._v("弱一致性")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",{attrs:{start:"3"}},[e("li",[this._v("最终一致性")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"解决方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决方案","aria-hidden":"true"}},[this._v("#")]),this._v(" 解决方案")])}],!1,null,null,null);e.default=s.exports}}]);