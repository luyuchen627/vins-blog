(window.webpackJsonp=window.webpackJsonp||[]).push([[126],{191:function(t,e,a){"use strict";a.r(e);var r=a(0),n=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h2",{attrs:{id:"nginx常用配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx常用配置","aria-hidden":"true"}},[t._v("#")]),t._v(" nginx常用配置")]),t._v(" "),a("h2",{attrs:{id:"基础配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础配置","aria-hidden":"true"}},[t._v("#")]),t._v(" 基础配置")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('#运行用户，默认即是nginx，可以不进行设置\nuser  nginx;\n#Nginx进程，一般设置为和CPU核数一样\nworker_processes  1;   \n#错误日志存放目录\nerror_log  /var/log/nginx/error.log warn;\n#进程pid存放位置\npid  /var/run/nginx.pid;\n\n\nevents {\n    worker_connections  1024; # 单个后台进程的最大并发数\n}\n\n\nhttp {\n    include       /etc/nginx/mime.types;   #文件扩展名与类型映射表\n    default_type  application/octet-stream;  #默认文件类型\n    #设置日志模式\n    log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n                      \'$status $body_bytes_sent "$http_referer" \'\n                      \'"$http_user_agent" "$http_x_forwarded_for"\';\n\n    access_log  /var/log/nginx/access.log  main;   #nginx访问日志存放位置\n\n    sendfile        on;   #开启高效传输模式\n    #tcp_nopush     on;    #减少网络报文段的数量\n\n    keepalive_timeout  65;  #保持连接的时间，也叫超时时间\n\n    #gzip  on;  #开启gzip压缩\n\n    include /etc/nginx/conf.d/*.conf; #包含的子配置项位置和文件\n\n')])])]),a("h2",{attrs:{id:"一些指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一些指令","aria-hidden":"true"}},[t._v("#")]),t._v(" 一些指令")]),t._v(" "),a("h3",{attrs:{id:"listen指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#listen指令","aria-hidden":"true"}},[t._v("#")]),t._v(" listen指令")]),t._v(" "),a("p",[t._v("监听端口号\n语法：listen 80 default_server;")]),t._v(" "),a("h3",{attrs:{id:"server-name指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#server-name指令","aria-hidden":"true"}},[t._v("#")]),t._v(" server_name指令")]),t._v(" "),a("p",[t._v("域名匹配\n语法：server_name 域名(可以是正则)")]),t._v(" "),a("h3",{attrs:{id:"root指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#root指令","aria-hidden":"true"}},[t._v("#")]),t._v(" root指令")]),t._v(" "),a("p",[t._v("根目录")]),t._v(" "),a("h3",{attrs:{id:"index指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#index指令","aria-hidden":"true"}},[t._v("#")]),t._v(" index指令")]),t._v(" "),a("p",[t._v("语法：index file ...\n默认为：index index.html\n作用域: server location")]),t._v(" "),a("p",[t._v("index指令指定了被作为index的文件，比如上面的index.html")]),t._v(" "),a("h3",{attrs:{id:"try-files指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#try-files指令","aria-hidden":"true"}},[t._v("#")]),t._v(" try_files指令")]),t._v(" "),a("p",[t._v("try_files最核心的功能是可以替代rewrite\n语法: try_files file ... uri 或  try_files  file ... = code\n默认值: 无\n作用域: server location")]),t._v(" "),a("p",[t._v("try_files会判断file是否存在，存在即显示，否则重定向最后一个参数(uri)")]),t._v(" "),a("blockquote",[a("p",[t._v("uri可以是文件，也可以是自定义的匹配规则")])]),t._v(" "),a("p",[t._v("例子")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("location / {\n\troot /static;\n\ttry_files $uri $uri.html $uri/ /default/index.html;\n}\n# 对 /a 的请求会尝试在 /static 下依次查找 a, a.html, a/，如果都没有找到的话将会被重定向到/default/index.html\n\n")])])]),a("h3",{attrs:{id:"error-page指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#error-page指令","aria-hidden":"true"}},[t._v("#")]),t._v(" error_page指令")]),t._v(" "),a("p",[t._v("error_page是错误代码的匹配规则\n语法：error_page code page\neg: error_page 404 /404.html")]),t._v(" "),a("h3",{attrs:{id:"rewrite语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rewrite语法","aria-hidden":"true"}},[t._v("#")]),t._v(" rewrite语法")]),t._v(" "),a("p",[t._v("语法：rewrite regex replacement [flag];")]),t._v(" "),a("p",[t._v("flag的值有以下几个：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("last 结束当前的rewrite指令，并用修改过的URI(即replacement)去匹配其他的location block")])]),t._v(" "),a("li",[a("p",[t._v("break 中止 rewirte，不再继续匹配")])]),t._v(" "),a("li",[a("p",[t._v("redirect 返回临时重定向的 HTTP 状态 302")])]),t._v(" "),a("li",[a("p",[t._v("permanent 返回永久重定向的 HTTP 状态 301")])])]),t._v(" "),a("h3",{attrs:{id:"权限指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#权限指令","aria-hidden":"true"}},[t._v("#")]),t._v(" 权限指令")]),t._v(" "),a("ul",[a("li",[t._v("allow 允许")]),t._v(" "),a("li",[t._v("deny 拒绝 all 表示所有")])]),t._v(" "),a("p",[t._v("在同一个块下的两个权限指令，先出现的设置会覆盖后出现的设置")]),t._v(" "),a("h3",{attrs:{id:"location匹配规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#location匹配规则","aria-hidden":"true"}},[t._v("#")]),t._v(" location匹配规则")]),t._v(" "),a("ul",[a("li",[t._v("location = /uri\t    = 表示精确匹配，只有完全匹配上才能生效")]),t._v(" "),a("li",[t._v("location ^~ /uri    \t^~ 开头对URL路径进行前缀匹配，并且在正则之前(非正则)")]),t._v(" "),a("li",[t._v("location ~ pattern\t开头表示区分大小写的正则匹配")]),t._v(" "),a("li",[t._v("location ~* pattern\t开头表示不区分大小写的正则匹配")]),t._v(" "),a("li",[t._v("location /uri\t        不带任何修饰符，也表示前缀匹配，但是在正则匹配之后")]),t._v(" "),a("li",[t._v("location /\t        通用匹配，任何未匹配到其它location的请求都会匹配到，相当于switch中的default")])]),t._v(" "),a("p",[t._v("匹配顺序按照上面的序列")]),t._v(" "),a("h2",{attrs:{id:"常用配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用配置","aria-hidden":"true"}},[t._v("#")]),t._v(" 常用配置")]),t._v(" "),a("h3",{attrs:{id:"反向代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反向代理","aria-hidden":"true"}},[t._v("#")]),t._v(" 反向代理")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("location / {\n\t\tproxy_pass  https://github.com;\n\t\tproxy_set_header Host $host;\n\t}\n")])])]),a("h3",{attrs:{id:"负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡","aria-hidden":"true"}},[t._v("#")]),t._v(" 负载均衡")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 使用upstream定义一个负载均衡器，在server里面的 proxy_pass 引用一下\nupstream test.net{\n    ip_hash;\n    server 192.168.10.13:80;\n    server 192.168.10.14:80  down;\n    server 192.168.10.15:8009  max_fails=3  fail_timeout=20s;\n    server 192.168.10.16:8080;\n}\nserver {\n    location / {\n        proxy_pass  http://test.net;\n    }\n}\n")])])]),a("h3",{attrs:{id:"虚拟主机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟主机","aria-hidden":"true"}},[t._v("#")]),t._v(" 虚拟主机")]),t._v(" "),a("ul",[a("li",[t._v("基于端口号的")]),t._v(" "),a("li",[t._v("基于域名")])]),t._v(" "),a("h3",{attrs:{id:"防盗链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防盗链","aria-hidden":"true"}},[t._v("#")]),t._v(" 防盗链")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("location ~* \\.(gif|jpg|swf)$ {\n\t# 设置白名单\n    valid_referers none blocked start.igrow.cn sta.igrow.cn;\n    if ($invalid_referer) {\n       rewrite ^/ http://$host/logo.png;\n    }\n}\n")])])]),a("p",[t._v("参考链接：")]),t._v(" "),a("ol",[a("li",[t._v("https://moonbingbing.gitbooks.io/openresty-best-practices/content/ngx/nginx.html")]),t._v(" "),a("li",[t._v("ngnix内置绑定变量：https://moonbingbing.gitbooks.io/openresty-best-practices/content/openresty/inline_var.html")]),t._v(" "),a("li",[t._v("http://fanqieto.top/2017/11/29/nginx%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/")]),t._v(" "),a("li",[t._v("https://juejin.im/post/5bd7a6046fb9a05d2c43f8c7")])])])}],!1,null,null,null);e.default=n.exports}}]);