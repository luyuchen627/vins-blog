(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{178:function(t,a,e){t.exports=e.p+"assets/img/git.4e43693a.png"},195:function(t,a,e){"use strict";e.r(a);var r=[function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("div",{staticClass:"content"},[r("h2",{attrs:{id:"git常用操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git常用操作","aria-hidden":"true"}},[t._v("#")]),t._v(" git常用操作")]),t._v(" "),r("h3",{attrs:{id:"先介绍几个概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#先介绍几个概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 先介绍几个概念")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("工作目录")]),t._v(" "),r("p",[t._v("工作目录就是我们在本地电脑上创建的文件夹，包含.git目录的文件夹")])]),t._v(" "),r("li",[r("p",[t._v("暂存区")]),t._v(" "),r("p",[t._v("暂存区是储存了文件改动，待提交的地方，只有在暂存区存在的文件，本地仓库才会追踪到它的变化。暂存区位于.git文件夹中的index文件")])]),t._v(" "),r("li",[r("p",[t._v("本地仓库(版本库)")]),t._v(" "),r("p",[t._v("本地仓库就是本地的代码版本库，包含所有提交版本的数据记录; .git中的HEAD指针，就指向仓库的最新版本")])]),t._v(" "),r("li",[r("p",[t._v("远程仓库")]),t._v(" "),r("p",[t._v("远程仓库托管代码的服务器，例如github，gitlab")])])]),t._v(" "),r("h3",{attrs:{id:"文件的状态"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#文件的状态","aria-hidden":"true"}},[t._v("#")]),t._v(" 文件的状态")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("未修改 | 未跟踪")]),t._v(" "),r("p",[t._v("未跟踪状态使用git add 跟踪文件改变")])]),t._v(" "),r("li",[r("p",[t._v("已修改，未暂存")]),t._v(" "),r("p",[t._v("已修改状态表示修改了某个文件，但还没有提交保存")])]),t._v(" "),r("li",[r("p",[t._v("已暂存，未提交")]),t._v(" "),r("p",[t._v("已暂存表示把已修改的文件放在了暂存区，等待下次提交")])]),t._v(" "),r("li",[r("p",[t._v("已提交，未推送")]),t._v(" "),r("p",[t._v("已提交状态表示该文件已经被安全地保存在本地仓库")])]),t._v(" "),r("li",[r("p",[t._v("已推送")]),t._v(" "),r("p",[t._v("文件推送到了远程仓库，团队可以拉取该修改")])])]),t._v(" "),r("h3",{attrs:{id:"文件的检查（git-diff）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#文件的检查（git-diff）","aria-hidden":"true"}},[t._v("#")]),t._v(" 文件的检查（git diff）")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("git diff 检查工作区和暂存区之间的差异")])]),t._v(" "),r("li",[r("p",[t._v("git diff --cached 检查暂存区和本地仓库之间的差异")])]),t._v(" "),r("li",[r("p",[t._v("git diff master origin/master 检查本地仓库和远程仓库之间的差异")])])]),t._v(" "),r("h3",{attrs:{id:"常用操作图解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常用操作图解","aria-hidden":"true"}},[t._v("#")]),t._v(" 常用操作图解")]),t._v(" "),r("p",[r("img",{attrs:{src:e(178),alt:"git常用操作"}})]),t._v(" "),r("h3",{attrs:{id:"提交"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#提交","aria-hidden":"true"}},[t._v("#")]),t._v(" 提交")]),t._v(" "),r("ol",[r("li",[t._v("git add . 文件添加")]),t._v(" "),r("li",[t._v("git commit 文件提交")]),t._v(" "),r("li",[t._v("git push [-u|f] origin master 推送")])]),t._v(" "),r("h3",{attrs:{id:"撤销修改"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#撤销修改","aria-hidden":"true"}},[t._v("#")]),t._v(" 撤销修改")]),t._v(" "),r("ol",[r("li",[t._v("状态2（已修改，未暂存）")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("git checkout .  -> 回到状态1（未修改）\ngit checkout -- file  // 单个文件撤销\n或者\ngit reset --hard  -> 回到状态1（未修改）\n")])])]),r("blockquote",[r("p",[t._v("git reset --hard 操作等价于 git reset 和 git checkout 2步操作")])]),t._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[t._v("状态3（已暂存，未提交）")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("git reset  -> 回到状态2（已修改，未暂存）\ngit reset HEAD file  // 单个文件撤销\ngit checkout .  -> 回到状态1（未修改）\n或者\ngit reset --hard  -> 回到状态1（未修改）\n")])])]),r("ol",{attrs:{start:"3"}},[r("li",[t._v("状态4（已提交，未推送）")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("git reset HEAD^  -> 回到状态2（已修改，未暂存）\ngit reset --soft HEAD^  -> 回到状态3（已暂存，未提交）\ngit reset --hard origin/master  -> 回到状态1（未修改）\n")])])]),r("ol",{attrs:{start:"4"}},[r("li",[t._v("状态5（已推送）")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("git reset --hard HEAD^  -> 回到状态1（未修改）\ngit push -f  -> 推送到远程\n")])])]),r("h3",{attrs:{id:"版本回滚"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#版本回滚","aria-hidden":"true"}},[t._v("#")]),t._v(" 版本回滚")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("git reset --hard  版本id  // 会删除提交记录\n使用git reset回退公共远程分支的版本后，需要其他所有人手动用远程master分支覆盖本地master分支，不适合多人合作")])]),t._v(" "),r("li",[r("p",[t._v("git revert 版本id")])])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("git revert HEAD      // 撤销最近一次提交\ngit revert HEAD~1    // 撤销上上次的提交，注意：数字从0开始\ngit revert 版本id    // 撤销0ffaacc这次提交\n")])])]),r("p",[t._v("git revert 命令意思是撤销某次提交。它会产生一个新的提交，虽然代码回退了，但是版本依然是向前的，所以，当你用revert回退之后，所有人pull之后，他们的代码也自动的回退了")]),t._v(" "),r("p",[t._v("注意：")]),t._v(" "),r("ul",[r("li",[t._v("revert 是撤销一次提交，所以后面的版本id是你需要回滚到的版本的前一次提交")]),t._v(" "),r("li",[t._v("使用revert HEAD是撤销最近的一次提交，如果你最近一次提交是用revert命令产生的，那么你再执行一次，就相当于撤销了上次的撤销操作，换句话说，你连续执行两次revert HEAD命令，就跟没执行是一样的")]),t._v(" "),r("li",[t._v("使用revert HEAD~1 表示撤销最近2次提交，这个数字是从0开始的，如果你之前撤销过，那么也会计算在内的")]),t._v(" "),r("li",[t._v("如果使用 revert 撤销的不是最近一次提交，那么一定会有代码冲突，需要你合并代码，合并代码只需要把当前的代码全部去掉，保留之前版本的代码就可以了")]),t._v(" "),r("li",[t._v("revert 命令的好处就是不会丢掉别人的提交，即使你撤销后覆盖了别人的提交，他更新代码后，可以在本地用 reset 向前回滚，找到自己的代码，然后拉一下分支，再回来合并上去就可以找回被你覆盖的提交了")])]),t._v(" "),r("ol",{attrs:{start:"3"}},[r("li",[t._v("手动修改需要回滚的代码")])]),t._v(" "),r("h3",{attrs:{id:"强制远程覆盖本地"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#强制远程覆盖本地","aria-hidden":"true"}},[t._v("#")]),t._v(" 强制远程覆盖本地")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("git fetch --all\ngit reset --hard origin/master\ngit pull\n")])])]),r("blockquote",[r("p",[t._v("参考链接： https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E7%BD%AE%E6%8F%AD%E5%AF%86")])]),t._v(" "),r("h2",{attrs:{id:"分支操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分支操作","aria-hidden":"true"}},[t._v("#")]),t._v(" 分支操作")]),t._v(" "),r("h3",{attrs:{id:"场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#场景","aria-hidden":"true"}},[t._v("#")]),t._v(" 场景")]),t._v(" "),r("ol",[r("li",[t._v("新需求")]),t._v(" "),r("li",[t._v("环境分离")]),t._v(" "),r("li",[t._v("版本管理")]),t._v(" "),r("li",[t._v("bug修复")])]),t._v(" "),r("blockquote",[r("p",[t._v("鼓励频繁的使用分支来协同工作")])]),t._v(" "),r("h3",{attrs:{id:"分支的创建"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分支的创建","aria-hidden":"true"}},[t._v("#")]),t._v(" 分支的创建")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("git branch 分支name       // 创建\ngit checkout 分支name     // 切换，移动HEAD指针指向新创建的分支\nor\ngit checkout -b 分支name [远程名]/[分支名]  // 创建本地相应的分支，同时从远程分支拉取分支\nor > v1.6.2\ngit checkout --track origin/serverfix\n")])])]),r("blockquote",[r("p",[t._v("远程分支 checkout 出来的本地分支，称为跟踪分支，跟踪分支可以使用git pull 和git push，master分支就是跟踪分支\ngit pull 是git fetch和git merge的合并命令")])]),t._v(" "),r("h3",{attrs:{id:"分支的删除"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分支的删除","aria-hidden":"true"}},[t._v("#")]),t._v(" 分支的删除")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("git branch -d 分支name   // 删除\n")])])]),r("h3",{attrs:{id:"分支的合并"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分支的合并","aria-hidden":"true"}},[t._v("#")]),t._v(" 分支的合并")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("git merge 分支name       // 合并\n\ngit rebase [主分支] [基分支] // 变基\n")])])]),r("blockquote",[r("p",[t._v("合并冲突的时候，git会把文件标记为未合并状态，同时加入标准的冲突解决标记，手动解决冲突后使用add -> commit继续提交")])]),t._v(" "),r("h3",{attrs:{id:"分支管理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分支管理","aria-hidden":"true"}},[t._v("#")]),t._v(" 分支管理")]),t._v(" "),r("ol",[r("li",[t._v("git branch命令")])]),t._v(" "),r("ul",[r("li",[t._v("不带参数，列出当前所有分支")]),t._v(" "),r("li",[t._v("-v 查看各个分支最后一个提交对象的信息")]),t._v(" "),r("li",[t._v("--merged 查看哪些分支已被并入当前分支，列出的列表中没有 * 的分支通常都可以用 git branch -d 来删掉")]),t._v(" "),r("li",[t._v("--no-merged 查看尚未合并的分支")])]),t._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[t._v("远程分支的拉取和推送")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('// 拉取\ngit fetch <远程仓库名> [远程分支名]:[本地分支名]\neg: git fetch origin a:local  // 拉取远程origin的a分支，并在本地创建local分支保存数据\n\n// 推送\ngit push <远程仓库名> <分支名>\ngit push <远程仓库名> [本地分支名]:[远程分支名]  // 推送本地分支到远程，远程分支不存在会被创建\neg: git push origin local:a  // 把本地local分支推送到远程origin的a分支\n\n// 删除\ngit push <远程仓库名> :<远程分支名>  // 删除远程分支，不要忘记":"\n')])])]),r("blockquote",[r("p",[t._v("可以使用git remote add添加不止一个远程")])])])}],i=e(0),s=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},r,!1,null,null,null);a.default=s.exports}}]);