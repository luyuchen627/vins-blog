(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{167:function(e,t,l){e.exports=l.p+"assets/img/dom.eb720328.jpg"},296:function(e,t,l){"use strict";l.r(t);var i=[function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("div",{staticClass:"content"},[i("p",[e._v("dom 操作是web交互中最常见的，以下是原生的js dom api")]),e._v(" "),i("h1",{attrs:{id:"dom操作"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#dom操作","aria-hidden":"true"}},[e._v("#")]),e._v(" dom操作")]),e._v(" "),i("h2",{attrs:{id:"节点分类"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#节点分类","aria-hidden":"true"}},[e._v("#")]),e._v(" 节点分类")]),e._v(" "),i("ul",[i("li",[e._v("元素节点(1) element")]),e._v(" "),i("li",[e._v("属性节点(2) attribute")]),e._v(" "),i("li",[e._v("文本节点(3) text")]),e._v(" "),i("li",[e._v("注释节点(8)")]),e._v(" "),i("li",[e._v("文档节点(9) document")])]),e._v(" "),i("h2",{attrs:{id:"nodelist-和-htmlcollection"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#nodelist-和-htmlcollection","aria-hidden":"true"}},[e._v("#")]),e._v(" NodeList 和 HTMLCollection")]),e._v(" "),i("ul",[i("li",[i("p",[e._v("NodeList 和 HTMLCollection 都是集合，类数组对象")]),e._v(" "),i("p",[e._v("集合表示根集于根集合的子树的视图，仅包含与给定过滤器匹配的节点。视图是线性的，在没有特定要求的情况下，集合中的节点必须以树的顺序排序\n集合可以是实时的，也可以是静态的，没有特殊说明，默认都是动态的")])]),e._v(" "),i("li",[i("p",[e._v("NodeList 对象是节点的集合，HTMLCollection是元素的集合")]),e._v(" "),i("p",[e._v("NodeList 最初设计是给 XML 使用的，但是在 DOM 中就会所有相匹配的节点，比如        el.childNodes 会返回所有的子节点，也会包括注释节点，这显然不是我们想要的；\n而 HTMLCollection 只返回元素节点，例如 el.children 和 getElements* 系列")])]),e._v(" "),i("li",[i("p",[e._v("内部方法和属性")]),e._v(" "),i("p",[e._v("NodeList拥有以下方法：")]),e._v(" "),i("ul",[i("li",[e._v("item()")]),e._v(" "),i("li",[e._v("keys()")]),e._v(" "),i("li",[e._v("values()")]),e._v(" "),i("li",[e._v("entries()")]),e._v(" "),i("li",[e._v("foreach()")]),e._v(" "),i("li",[e._v("length")])]),e._v(" "),i("p",[e._v("HTMLCollection只拥有item()方法和length属性")])])]),e._v(" "),i("h2",{attrs:{id:"节点操作"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#节点操作","aria-hidden":"true"}},[e._v("#")]),e._v(" 节点操作")]),e._v(" "),i("ol",[i("li",[e._v("创建新节点")])]),e._v(" "),i("ul",[i("li",[e._v("document.createElement(tagName): 创建一个具体的元素")]),e._v(" "),i("li",[e._v("document.createTextNode(text): 创建一个文本节点")]),e._v(" "),i("li",[e._v("node.cloneNode(true/false): 克隆一个节点,它接收一个bool参数，用来表示是否复制子元素")]),e._v(" "),i("li",[e._v("document.createDocumentFragment(): 创建一个DOM片段, 用来存储临时节点，文档片段存在于内存中，并不在DOM树中,因此大量操作DOM时用它可以大大提升性能")])]),e._v(" "),i("ol",{attrs:{start:"2"}},[i("li",[e._v("添加、移除、替换、插入")])]),e._v(" "),i("ul",[i("li",[e._v("parent.appendChild(child): 添加子节点，如果child已经存在，则删除，但会保留事件")]),e._v(" "),i("li",[e._v("parent.removeChild(child): 删除子节点")]),e._v(" "),i("li",[e._v("parent.replaceChild(newNode, oldNode): 替换节点")]),e._v(" "),i("li",[e._v("parent.insertBefore(newNode, refNode): 在refNode前插入一个newNode节点，如果refNode是undefined或null，则insertBefore会将节点添加到末尾；")])]),e._v(" "),i("ol",{attrs:{start:"3"}},[i("li",[e._v("查找节点")])]),e._v(" "),i("ul",[i("li",[i("p",[e._v("el.getElementById()：根据节点ID查找元素，大小写敏感，如果有多个结果，只返回第一个")])]),e._v(" "),i("li",[i("p",[e._v("el.getElementsByClassName()：根据类名查找元素，多个类名用空格分隔，返回一个 HTMLCollection")])]),e._v(" "),i("li",[i("p",[e._v("el.getElementsByTagName()：根据标签查找元素，* 表示查询所有标签，返回一个 HTMLCollection")])]),e._v(" "),i("li",[i("p",[e._v("el.getElementsByName()：根据元素的name属性查找，返回一个 NodeList")])]),e._v(" "),i("li",[i("p",[e._v("el.querySelector()：返回单个 Node 如果匹配到多个结果，只返回第一个")])]),e._v(" "),i("li",[i("p",[e._v("el.querySelectorAll()：返回一个静态的 NodeList")])]),e._v(" "),i("li",[i("p",[e._v("el.childNodes: 子节点，返回一个NodeList")])]),e._v(" "),i("li",[i("p",[e._v("el.children: 子元素，返回一个HTMLCollection")])]),e._v(" "),i("li",[i("p",[e._v("el.parentNode: 父节点(可能是element,document或者DocumentFragment)")])]),e._v(" "),i("li",[i("p",[e._v("el.parentElement: 父元素(element),没有则为null")])]),e._v(" "),i("li",[i("p",[e._v("el.childElementCount：返回子元素（不包括文本节点和注释）的个数")])]),e._v(" "),i("li",[i("p",[e._v("el.firstChild | el.firstElementChild：指向第一个子元素")])]),e._v(" "),i("li",[i("p",[e._v("el.lastChild | el.lastElementChild：指向最后一个子元素")])]),e._v(" "),i("li",[i("p",[e._v("el.previousSibling | el.previousElementSibling：指向前一个同辈元素")])]),e._v(" "),i("li",[i("p",[e._v("el.nextSibling | el.nextElementSibling：指向最后一个同辈元素")])])]),e._v(" "),i("blockquote",[i("p",[e._v("含有Element的属性只返回元素节点，会忽略到文本节点和注释节点")])]),e._v(" "),i("h2",{attrs:{id:"属性的修改"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#属性的修改","aria-hidden":"true"}},[e._v("#")]),e._v(" 属性的修改")]),e._v(" "),i("ul",[i("li",[e._v("setAttribute(name, value): 设置属性")]),e._v(" "),i("li",[e._v("getAttribute(name): 获取属性")])]),e._v(" "),i("h2",{attrs:{id:"dom的位置和尺寸"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#dom的位置和尺寸","aria-hidden":"true"}},[e._v("#")]),e._v(" dom的位置和尺寸")]),e._v(" "),i("p",[e._v("网上经典图示：\n"),i("img",{attrs:{src:l(167),alt:"网上经典图示"}})])])}],v=l(0),_=Object(v.a)({},function(){this.$createElement;this._self._c;return this._m(0)},i,!1,null,null,null);t.default=_.exports}}]);