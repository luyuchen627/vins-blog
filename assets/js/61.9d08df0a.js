(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{272:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),s("h2",{attrs:{id:"js类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js类型","aria-hidden":"true"}},[t._v("#")]),t._v(" js类型")]),t._v(" "),s("ul",[s("li",[t._v("Number 数字 (包含Infinity和NaN)")]),t._v(" "),s("li",[t._v("String 字符串")]),t._v(" "),s("li",[t._v("Boolean 布尔")]),t._v(" "),s("li",[t._v("undefined")]),t._v(" "),s("li",[t._v("null")]),t._v(" "),s("li",[t._v("Object 对象 (array，set，map都是特殊的object)")]),t._v(" "),s("li",[t._v("Symbol (es6,暂不讨论)")])]),t._v(" "),s("h2",{attrs:{id:"类型判断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型判断","aria-hidden":"true"}},[t._v("#")]),t._v(" 类型判断")]),t._v(" "),s("ol",[s("li",[t._v("typeof\ntypeof的返回值：")])]),t._v(" "),s("ul",[s("li",[t._v("number")]),t._v(" "),s("li",[t._v("string")]),t._v(" "),s("li",[t._v("boolean")]),t._v(" "),s("li",[t._v("undefined")]),t._v(" "),s("li",[t._v("object (object, null, Math, array, set, map, 通过new命令生成的实例)都返回object")]),t._v(" "),s("li",[t._v("function (function, Class)返回function")]),t._v(" "),s("li",[t._v("symbol")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("instanceof")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("instance_of")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("R")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// L 表示左表达式，R 表示右表达式")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("O")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("R")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 取 R 的显示原型")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 取 L 的隐式原型")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("O")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里重点：当 O 严格等于 L 时，返回 true ")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 原型连寻找，因此可以判断子实例是否为父类型")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("Object.prototype.toString\n利用Object.prototype.toString.call(obj)的返回值做类型判断")])]),t._v(" "),s("ul",[s("li",[t._v("String         -> '[object String]'")]),t._v(" "),s("li",[t._v("Number         -> '[object Number]'")]),t._v(" "),s("li",[t._v("Boolean        -> '[object Boolean]'")]),t._v(" "),s("li",[t._v("Array          -> '[object Array]'")]),t._v(" "),s("li",[t._v("Date           -> '[object Date]'")]),t._v(" "),s("li",[t._v("Object         -> '[object Object]'")]),t._v(" "),s("li",[t._v("RegExp         -> '[object RegExp]'")]),t._v(" "),s("li",[t._v("Window         -> '[object Window]'")]),t._v(" "),s("li",[t._v("HTMLDocument   -> '[object HTMLDocument]'")])]),t._v(" "),s("h2",{attrs:{id:"类型转换相关的函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型转换相关的函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 类型转换相关的函数")]),t._v(" "),s("p",[s("strong",[t._v("valueOf")]),t._v("和"),s("strong",[t._v("toString")]),t._v("，这两个函数是定义在Object.prototype上的方法，会被继承，也可以改写")]),t._v(" "),s("ol",[s("li",[t._v("valueOf是返回这个对象逻辑上对应的原始类型的值")])]),t._v(" "),s("p",[t._v("部分内置对象调用valueOf的行为：")]),t._v(" "),s("ul",[s("li",[t._v("String  字符串值 (原始类型)")]),t._v(" "),s("li",[t._v("Number  数字     (原始类型)")]),t._v(" "),s("li",[t._v("Boolean 布尔值   (原始类型)")]),t._v(" "),s("li",[t._v("Array   数组本身  (object)")]),t._v(" "),s("li",[t._v("Date    毫秒数   (原始类型)")]),t._v(" "),s("li",[t._v("Object  对象本身  (object)")]),t._v(" "),s("li",[t._v("Function 函数本身 (object)")])]),t._v(" "),s("blockquote",[s("p",[t._v("Math 和 Error 对象没有 valueOf 方法")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("toString是返回这个对象的字符串描述方式")])]),t._v(" "),s("p",[t._v("部分内置对象调用toString的行为：")]),t._v(" "),s("ul",[s("li",[t._v("undefined  'undefined'")]),t._v(" "),s("li",[t._v("null    'null'")]),t._v(" "),s("li",[t._v("String  字符串值")]),t._v(" "),s("li",[t._v("Number  数字的字符串形式")]),t._v(" "),s("li",[t._v("Boolean\n"),s("ol",[s("li",[t._v("true -> 'true'")]),t._v(" "),s("li",[t._v("false -> 'false'")])])]),t._v(" "),s("li",[t._v("Array\n"),s("ol",[s("li",[t._v("降为一维数组")]),t._v(" "),s("li",[t._v("调用join(',')")])])]),t._v(" "),s("li",[t._v("Date    毫秒数")]),t._v(" "),s("li",[t._v("Object  对象本身的字符串表现  '[object Object]'")]),t._v(" "),s("li",[t._v("Function 函数本身的字符串表现 'function () { [native code] }'")])]),t._v(" "),s("h2",{attrs:{id:"常见类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见类型转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 常见类型转换")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("ToString()\n参见类型转换相关的函数的toString")])]),t._v(" "),s("li",[s("p",[t._v("ToBoolean()\n当为"),s("strong",[t._v("undefined")]),t._v("， "),s("strong",[t._v("null")]),t._v("，"),s("strong",[t._v("Number(+0, -0, 或者NaN)")]),t._v(", "),s("strong",[t._v("空字符串")]),t._v(" 返回false；其余情况返回true")])]),t._v(" "),s("li",[s("p",[t._v("ToNumber()")])])]),t._v(" "),s("ul",[s("li",[t._v("undefined  -> NaN")]),t._v(" "),s("li",[t._v("null     -> 0")]),t._v(" "),s("li",[t._v("Boolean\n"),s("ul",[s("li",[t._v("true -> 1")]),t._v(" "),s("li",[t._v("false -> 0")])])]),t._v(" "),s("li",[t._v("String   类似于Number()")]),t._v(" "),s("li",[t._v("Symbol   抛出 TypeError 异常")]),t._v(" "),s("li",[t._v("Object   ToPrimitive")])]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("ToPrimitive() 转化为原始类型")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** 将输入转化为原始类型\n * @params input 输入\n * @params PreferredType 期望的类型 可选 值：[ Number | String ]\n*/")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToPrimitive")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("PreferredType "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("将input转化成一个原始类型的值。PreferredType参数要么不传入，要么是。如果PreferredType参数是Number，ToPrimitive这样执行：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("如果input本身就是原始类型，直接返回input")])]),t._v(" "),s("li",[s("p",[t._v("如果PreferredType没有传值，input是内置的Date类型，PreferredType视为String，否则PreferredType视为Number，即对于所有非日期对象来说，对象到原始值的转换基本上是对象到数字的转换")])]),t._v(" "),s("li",[s("p",[t._v("PreferredType为Number,流程如下：")])])]),t._v(" "),s("ol",[s("li",[t._v("调用input.valueOf()，如果结果是原始类型，则返回这个结果")]),t._v(" "),s("li",[t._v("调用input.toString()，如果结果是原始类型，则返回这个结果")]),t._v(" "),s("li",[t._v("否则抛出TypeError异常")])]),t._v(" "),s("ul",[s("li",[t._v("PreferredType为String,流程如下：")])]),t._v(" "),s("ol",[s("li",[t._v("调用input.toString()，如果结果是原始类型，则返回这个结果")]),t._v(" "),s("li",[t._v("调用input.valueOf()，如果结果是原始类型，则返回这个结果")]),t._v(" "),s("li",[t._v("否则抛出TypeError异常")])]),t._v(" "),s("h2",{attrs:{id:"隐式转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隐式转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 隐式转换")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("运算符")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("运算符+")]),t._v(" "),s("ol",[s("li",[t._v("先把符号两边的值通过"),s("strong",[t._v("ToPrimitive")]),t._v("转化为原始类型")]),t._v(" "),s("li",[t._v("如果有一个值的类型为string，则将两个值通过"),s("strong",[t._v("ToString")]),t._v("转化为string类型，做字符串拼接，否则通过"),s("strong",[t._v("ToNumber")]),t._v("转化为number做算术运算")])]),t._v(" "),s("blockquote",[s("p",[t._v("NaN 数学运算均返回 NaN")])])]),t._v(" "),s("li",[s("p",[t._v("其他运算符(-, *, /, %, 比较运算符)，把符号两边的值通过"),s("strong",[t._v("ToNumber")]),t._v("转化为number做算术运算")]),t._v(" "),s("p",[t._v("比较运算符的 "),s("strong",[t._v("a>=b")]),t._v("，有时会被处理成 "),s("strong",[t._v("!(a<b)")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\ta "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" b   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false, 两边调用ToPrimitive, 返回[object Object]两遍一致")]),t._v("\n\ta "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" b  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false, 两边不同的引用")]),t._v("\n\ta "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false, 同 a < b")]),t._v("\n\n\ta "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" b  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true, 处理成 !(a > b) 所以为true")]),t._v("\n\ta "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" b  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true, 同 a <= b")]),t._v("\n")])])])])])]),t._v(" "),s("li",[s("p",[t._v("x == y 比较 简单规则")]),t._v(" "),s("ol",[s("li",[t._v("x,y类型相同时，以下为特殊，其余均可以===比较\nNaN == NaN 返回false")]),t._v(" "),s("li",[t._v("null == undefined  -> true, 反之亦然")]),t._v(" "),s("li",[t._v("Number == String   -> Number == ToNumber(String)，反之亦然")]),t._v(" "),s("li",[t._v("Boolean == y(any)       -> ToNumber(Boolean) == y")]),t._v(" "),s("li",[t._v("x(any) == Boolean       -> x == ToNumber(Boolean)")]),t._v(" "),s("li",[t._v("x(原始类型) == Object       -> x == ToPrimitive(Object)，反之亦然")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("如果==中有true或者false, 千万不要使用==(会被转为数字0,1来进行判断）")])]),t._v(" "),s("blockquote",[s("p",[t._v("如果两遍的值中有[]、''或者0，尽量不要使用 ==")])]),t._v(" "),s("h2",{attrs:{id:"显式转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#显式转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 显式转换")]),t._v(" "),s("ul",[s("li",[t._v("Number()")]),t._v(" "),s("li",[t._v("String()")]),t._v(" "),s("li",[t._v("Boolean()")])]),t._v(" "),s("h2",{attrs:{id:"谜题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#谜题","aria-hidden":"true"}},[t._v("#")]),t._v(" 谜题")]),t._v(" "),s("ol",[s("li",[t._v("{} + [] 和 [] + {}")])]),t._v(" "),s("p",[t._v("{} + []：运算符前面的{}认为是空的代码块，因此相当于 +[] = 0\n[] + {}：即 ToNumber([]) + ToNumber({}) -> '' + '[object Object]'")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("{} 和 !{} 与 [] 和 ![]")])]),t._v(" "),s("p",[t._v("{} == {}  -> false\n{} == !{} -> {} == false -> {} == 0 -> '[object Object]' == 0")]),t._v(" "),s("p",[t._v("[] == []  -> false\n[] == ![] -> [] == false -> [] == 0 -> '' == 0 -> true")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("parseInt类型转化的问题")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @params str 输入 字符串\n * @params base 转化的数字的进制 数字 默认：10\n*/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" base"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("注意")])]),t._v(" "),s("ol",[s("li",[t._v("当输入不是String类型时，会隐式转换，需要注意不可预料的问题")]),t._v(" "),s("li",[t._v("当输入小于**0.0000001(1e-7)**的数字转换成String时，会变成科学记号法")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0000001")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// parseInt(0.0000001) == parseInt('1e-7')")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// parseInt(1/0, 19) == parseInt('Infinity', 19)")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("250")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// parseInt(false, 16) == parseInt('false', 16)")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parseInt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为 parseInt 需要两个参数(val,radix)，其中 radix 表示解析时用的基数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// map 传了3个(element,index,array)，对应的 radix 不合法导致解析失败")]),t._v("\n")])])])])}],!1,null,null,null);a.default=e.exports}}]);