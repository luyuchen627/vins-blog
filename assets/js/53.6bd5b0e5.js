(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{286:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用域","aria-hidden":"true"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),s("h2",{attrs:{id:"执行上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文","aria-hidden":"true"}},[t._v("#")]),t._v(" 执行上下文")]),t._v(" "),s("p",[t._v("执行上下文及代码的执行环境，通常会有以下几个基础的属性")]),t._v(" "),s("ul",[s("li",[t._v("变量对象(VO)")]),t._v(" "),s("li",[t._v("作用域链(scope)")]),t._v(" "),s("li",[t._v("this指针")])]),t._v(" "),s("h2",{attrs:{id:"变量对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 变量对象")]),t._v(" "),s("p",[t._v("变量对象是执行上下文中的一个特殊的属性，它存储着在上下文中声明的以下内容：")]),t._v(" "),s("ul",[s("li",[t._v("变量声明")]),t._v(" "),s("li",[t._v("函数声明")]),t._v(" "),s("li",[t._v("函数的形参")])]),t._v(" "),s("p",[t._v("变量对象(VO)是在代码未执行之前，代码编译后形成的对象，这个对象"),s("strong",[t._v("无法访问")]),t._v("，但是进入执行阶段之后，变量对象转变为了活动对象(AO)")]),t._v(" "),s("p",[t._v("全局上下文中的变量对象就是自己，同时包含了全局属性，window，Math等，这就是我们可以直接调用他们的原因")]),t._v(" "),s("p",[t._v("在函数执行上下文中，变量对象是不能直接访问的，此时由活动对象扮演变量对象的角色\n活动对象(AO)除了包含变量对象(VO)，还包含函数的形参(arguments对象)和实参")]),t._v(" "),s("p",[t._v("参考链接：http://www.cnblogs.com/TomXu/archive/2012/01/16/2309728.html")]),t._v(" "),s("h2",{attrs:{id:"变量的重复宣告"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量的重复宣告","aria-hidden":"true"}},[t._v("#")]),t._v(" 变量的重复宣告")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])])]),s("p",[t._v("上述情况就是变量的重复宣告，这和变量的重新定义是有区别的\nJS引擎对于重复宣告的规定是以最近的变量赋值作为变量执行时的值")]),t._v(" "),s("p",[t._v("以函数内形参和变量同名的情况来分析")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数实参指向a的引用，a.n -> 1")]),t._v("\n    a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对引用a.n赋值，此时 a.n -> 3")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里a变量的定义会提升，和函数的形参构成重复宣告，重复宣告使用a的引用的值；执行到这里，对变量a重新赋值，此时 a.n -> 2")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打印顺序 1 -> 2 -> 3")]),t._v("\n")])])]),s("h2",{attrs:{id:"变量的作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量的作用域","aria-hidden":"true"}},[t._v("#")]),t._v(" 变量的作用域")]),t._v(" "),s("p",[t._v("变量的作用域就两种：全局变量和局部变量")]),t._v(" "),s("p",[t._v("全局作用域：最外层函数定义的变量拥有全局作用域，即对任何内部函数来说，都是可以访问的")]),t._v(" "),s("p",[t._v("局部作用域：局部作用域一般只在固定的代码片段内可访问到，而对于函数外部是无法访问的")]),t._v(" "),s("p",[t._v("变量定义的时候会有"),s("strong",[t._v("变量提升")]),t._v("的现象，就是所有的变量定义都会被提升到执行上下文的顶部定义\n函数的变量提升在普通变量的定义提升之前")]),t._v(" "),s("blockquote",[s("p",[t._v("函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上是在全局对象时添加了一个属性(并不是声明一个变量，可以用delete实验一下)")])]),t._v(" "),s("p",[t._v("变量的作用域会沿着局部作用域，局部作用域链，全局作用域和全局作用域链的顺序去访问")])])}],!1,null,null,null);a.default=e.exports}}]);