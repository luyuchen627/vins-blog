(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{182:function(e,v,_){"use strict";_.r(v);var i=_(0),r=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("div",{staticClass:"content"},[_("p",[e._v("redis 高性能的key-value缓存数据库")]),e._v(" "),_("h2",{attrs:{id:"redis常用命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#redis常用命令","aria-hidden":"true"}},[e._v("#")]),e._v(" redis常用命令")]),e._v(" "),_("h3",{attrs:{id:"启动"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#启动","aria-hidden":"true"}},[e._v("#")]),e._v(" 启动")]),e._v(" "),_("p",[e._v("启动服务：redis-server\n启动客户端：redis-cli -h host -p port -a password 例如：redis-cli -h 127.0.0.1 -p 6379")]),e._v(" "),_("h3",{attrs:{id:"配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#配置","aria-hidden":"true"}},[e._v("#")]),e._v(" 配置")]),e._v(" "),_("p",[e._v("Redis 的配置文件位于 Redis 安装目录下，文件名为 redis.conf\n也可以通过 CONFIG 命令查看或设置配置项：CONFIG SET/GET")]),e._v(" "),_("h3",{attrs:{id:"数据类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据类型","aria-hidden":"true"}},[e._v("#")]),e._v(" 数据类型")]),e._v(" "),_("p",[e._v("Redis支持五种数据类型：")]),e._v(" "),_("ul",[_("li",[e._v("string（字符串）")]),e._v(" "),_("li",[e._v("hash（哈希） hash 特别适合用于存储对象")]),e._v(" "),_("li",[e._v("list（列表） 类似于双向队列")]),e._v(" "),_("li",[e._v("set（集合）")]),e._v(" "),_("li",[e._v("zset(sorted set：有序集合)")])]),e._v(" "),_("h3",{attrs:{id:"命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#命令","aria-hidden":"true"}},[e._v("#")]),e._v(" 命令")]),e._v(" "),_("h4",{attrs:{id:"字符串"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#字符串","aria-hidden":"true"}},[e._v("#")]),e._v(" 字符串")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("set key value      设置指定 key 的值")])]),e._v(" "),_("li",[_("p",[e._v("get key            获取指定 key 的值")])]),e._v(" "),_("li",[_("p",[e._v("del key            删除指定的key")])]),e._v(" "),_("li",[_("p",[e._v("getrange key start end 返回 key 中字符串值的子字符("),_("strong",[e._v("包括 start 和 end 在内")]),e._v("),-1表示倒数第一个")])]),e._v(" "),_("li",[_("p",[e._v("getset key value   将给定 key 的值设为 value ，并返回 key 的旧值(old value)")])]),e._v(" "),_("li",[_("p",[e._v("setnx key value    只有在 key 不存在时设置 key 的值")])]),e._v(" "),_("li",[_("p",[e._v("mset key1 value1 key2 value2 .. 同时设置一个或多个 key-value 对")])]),e._v(" "),_("li",[_("p",[e._v("msetnx key1 value1 key2 value2 .. 同时设置一个或多个 key-value 对,仅当key不存在时")])]),e._v(" "),_("li",[_("p",[e._v("mget key1 key2 ... 获取多个 key 的值")])]),e._v(" "),_("li",[_("p",[e._v("strlen key         返回 key 所储存的字符串值的长度")])]),e._v(" "),_("li",[_("p",[e._v("incrby ket value   将 key 中储存的数字加上指定的增量值,key不存在视为0,key必须是数字")])]),e._v(" "),_("li",[_("p",[e._v("decrby ket value   将 key 中储存的数字减去指定的值,key不存在视为0,key必须是数字")])]),e._v(" "),_("li",[_("p",[e._v("append key value   字符串拼接，key不存在视为''，其他类型会隐式转换为字符串")])])]),e._v(" "),_("h3",{attrs:{id:"哈希"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#哈希","aria-hidden":"true"}},[e._v("#")]),e._v(" 哈希")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("hset key field value   设置哈希表 key.field = value")])]),e._v(" "),_("li",[_("p",[e._v("hget key field         获取key.field")])]),e._v(" "),_("li",[_("p",[e._v("hdel key field         删除key.field")])]),e._v(" "),_("li",[_("p",[e._v("hexists key field      key.field是否存在")])]),e._v(" "),_("li",[_("p",[e._v("hgetall key            获取 key 的所有字段和值")])]),e._v(" "),_("li",[_("p",[e._v("hmset key field1 [field2] 获取所有给定字段的值")])]),e._v(" "),_("li",[_("p",[e._v("hmset key field1 value1 [field2 value2 ]  同时设置多个字段")])]),e._v(" "),_("li",[_("p",[e._v("hsetnx key field value 只有在字段 field 不存在时，设置哈希表字段的值")])]),e._v(" "),_("li",[_("p",[e._v("hkeys key            获取所有哈希表中的字段")])]),e._v(" "),_("li",[_("p",[e._v("hvals key            获取哈希表中所有值")])]),e._v(" "),_("li",[_("p",[e._v("hincrby key field increment 为哈希表 key 中的指定字段的整数值加上增量 increment")])])]),e._v(" "),_("h3",{attrs:{id:"列表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#列表","aria-hidden":"true"}},[e._v("#")]),e._v(" 列表")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("lpush key value1 [value2]      将一个或多个值插入到列表头部")])]),e._v(" "),_("li",[_("p",[e._v("rpush key value1 [value2]      将一个或多个值插入到列表尾部")])]),e._v(" "),_("li",[_("p",[e._v("lpushx key value               将一个值插入到已存在的列表头部")])]),e._v(" "),_("li",[_("p",[e._v("rpushx key value               将一个值插入到已存在的列表尾部")])]),e._v(" "),_("li",[_("p",[e._v("lpop key                       移出并获取列表的第一个元素")])]),e._v(" "),_("li",[_("p",[e._v("rpop key                       移除并获取列表的最后一个元素")])]),e._v(" "),_("li",[_("p",[e._v("blpop key1 [key2 ] timeout     移出并获取列表的第一个元素(有超时时间)")])]),e._v(" "),_("li",[_("p",[e._v("brpop key1 [key2 ] timeout     移出并获取列表的最后一个元素(有超时时间)")])]),e._v(" "),_("li",[_("p",[e._v("lindex key index               通过索引获取列表中的元素")])]),e._v(" "),_("li",[_("p",[e._v("linsert key before|after pivot value 在列表的pivot元素前或者后插入元素")])]),e._v(" "),_("li",[_("p",[e._v("llen key                       获取列表长度")])]),e._v(" "),_("li",[_("p",[e._v("lrange key start stop          获取列表指定范围内的元素")])]),e._v(" "),_("li",[_("p",[e._v("lrem key count value           移除列表元素")])]),e._v(" "),_("li",[_("p",[e._v("lset key index value           通过索引设置列表元素的值")])]),e._v(" "),_("li",[_("p",[e._v("ltrim key start stop           对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。")])]),e._v(" "),_("li",[_("p",[e._v("rpop key 移除列表的最后一个元素，返回值为移除的元素。")])])]),e._v(" "),_("h3",{attrs:{id:"集合"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#集合","aria-hidden":"true"}},[e._v("#")]),e._v(" 集合")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("sadd key member1 [member2]     向集合添加一个或多个成员")])]),e._v(" "),_("li",[_("p",[e._v("smembers key                   返回集合中的所有成员")])]),e._v(" "),_("li",[_("p",[e._v("scard key                      获取集合的成员数量")])]),e._v(" "),_("li",[_("p",[e._v("sdiff key1 [key2]              返回给定所有集合的差集")])]),e._v(" "),_("li",[_("p",[e._v("sdiffstore newset key1 [key2]  返回给定所有集合的差集并存储在 newset 中")])]),e._v(" "),_("li",[_("p",[e._v("sinter key1 [key2]             返回给定所有集合的交集")])]),e._v(" "),_("li",[_("p",[e._v("sinterstore newset key1 [key2] 返回给定所有集合的交集并存储在 newset 中")])]),e._v(" "),_("li",[_("p",[e._v("sunion key1 [key2]             返回所有给定集合的并集")])]),e._v(" "),_("li",[_("p",[e._v("sunionstore newset key1 [key2]  返回所有给定集合的并集存储在 newset 集合中")])]),e._v(" "),_("li",[_("p",[e._v("sismember key member           判断 member 元素是否是集合 key 的成员")])]),e._v(" "),_("li",[_("p",[e._v("smove source newset member     将 member 元素从 source 集合移动到 newset 集合")])]),e._v(" "),_("li",[_("p",[e._v("spop key                       移除并返回集合中的一个随机元素")])]),e._v(" "),_("li",[_("p",[e._v("srandmember key [count]        返回集合中一个或多个随机数")])]),e._v(" "),_("li",[_("p",[e._v("srem key member1 [member2]     移除集合中一个或多个成员")])]),e._v(" "),_("li",[_("p",[e._v("sscan key cursor [MATCH pattern] [COUNT count] 迭代集合中的元素")])])]),e._v(" "),_("h3",{attrs:{id:"有序集合"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#有序集合","aria-hidden":"true"}},[e._v("#")]),e._v(" 有序集合")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("zadd key score1 member1 [score2 member2] 将一个或多个成员元素及其分数值加入到有序集当中")])]),e._v(" "),_("li",[_("p",[e._v("zcard key                      获取有序集合的成员数")])]),e._v(" "),_("li",[_("p",[e._v("zcount key min max             计算在有序集合中指定区间分数的成员数")])]),e._v(" "),_("li",[_("p",[e._v("zincrby key increment member   有序集合中对指定成员的分数加上增量 increment")])]),e._v(" "),_("li",[_("p",[e._v("zinterstore destination numkeys key [key ...] 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中")])]),e._v(" "),_("li",[_("p",[e._v("zlexcount key min max          在有序集合中计算指定字典区间内成员数量")])]),e._v(" "),_("li",[_("p",[e._v("zrange key start stop [WITHSCORES] 通过索引区间返回有序集合成指定区间内的成员")])]),e._v(" "),_("li",[_("p",[e._v("zrangebylex key min max [LIMIT offset count] 通过字典区间返回有序集合的成员")])]),e._v(" "),_("li",[_("p",[e._v("zrangebyscore key min max [WITHSCORES] [LIMIT] 通过分数返回有序集合指定区间内的成员")])]),e._v(" "),_("li",[_("p",[e._v("zrank key member               返回有序集合中指定成员的索引")])]),e._v(" "),_("li",[_("p",[e._v("zrem key member [member ...]   移除有序集合中的一个或多个成员")])]),e._v(" "),_("li",[_("p",[e._v("zremrangebylex key min max     移除有序集合中给定的字典区间的所有成员")])]),e._v(" "),_("li",[_("p",[e._v("zremrangebyrank key start stop 移除有序集合中给定的排名区间的所有成员")])]),e._v(" "),_("li",[_("p",[e._v("zremrangebyscore key min max   移除有序集合中给定的分数区间的所有成员")])]),e._v(" "),_("li",[_("p",[e._v("zrevrange key start stop [WITHSCORES]     返回有序集中指定区间内的成员，通过索引，分数从高到底")])]),e._v(" "),_("li",[_("p",[e._v("zrevrangebyscore key max min [WITHSCORES] 返回有序集中指定分数区间内的成员，分数从高到低排序")])]),e._v(" "),_("li",[_("p",[e._v("zrevrank key member            返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序")])]),e._v(" "),_("li",[_("p",[e._v("zscore key member              返回有序集中，成员的分数值")])]),e._v(" "),_("li",[_("p",[e._v("zunionstore destination numkeys key [key ...]  计算给定的一个或多个有序集的并集，并存储在新的 key 中")])]),e._v(" "),_("li",[_("p",[e._v("zscan key cursor [MATCH pattern] [COUNT count] 迭代有序集合中的元素（包括元素成员和元素分值）")])])]),e._v(" "),_("h3",{attrs:{id:"发布订阅"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#发布订阅","aria-hidden":"true"}},[e._v("#")]),e._v(" 发布订阅")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("subscribe channel [channel ...] 订阅给定的一个或多个频道的信息")])]),e._v(" "),_("li",[_("p",[e._v("psubscribe pattern [pattern ...] 订阅一个或多个符合给定模式的频道。")])]),e._v(" "),_("li",[_("p",[e._v("pubsub subcommand [argument [argument ...]] 查看订阅与发布系统状态。")])]),e._v(" "),_("li",[_("p",[e._v("publish channel message 将信息发送到指定的频道。")])]),e._v(" "),_("li",[_("p",[e._v("unsubscribe [channel [channel ...]] 指退订给定的频道。")])]),e._v(" "),_("li",[_("p",[e._v("punsubscribe [pattern [pattern ...]] 退订所有给定模式的频道。")])])]),e._v(" "),_("h3",{attrs:{id:"事务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事务","aria-hidden":"true"}},[e._v("#")]),e._v(" 事务")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("multi             标记一个事务块的开始。")])]),e._v(" "),_("li",[_("p",[e._v("exec              执行所有事务块内的命令。")])]),e._v(" "),_("li",[_("p",[e._v("discard           取消事务，放弃执行事务块内的所有命令。")])]),e._v(" "),_("li",[_("p",[e._v("watch key [key ...] 监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。")])]),e._v(" "),_("li",[_("p",[e._v("unwatch           取消 WATCH 命令对所有 key 的监视。")])])])])}],!1,null,null,null);v.default=r.exports}}]);