(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{295:function(t,e,r){"use strict";r.r(e);var s=r(0),a=Object(s.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),r("p",[t._v("事件源：")]),t._v(" "),r("ul",[r("li",[t._v("process.nextTick")]),t._v(" "),r("li",[t._v("promises")]),t._v(" "),r("li",[t._v("Object.observe")]),t._v(" "),r("li",[r("a",{attrs:{href:"http://javascript.ruanyifeng.com/dom/mutationobserver.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("MutationObserver"),r("OutboundLink")],1)])]),t._v(" "),t._m(2),t._v(" "),r("p",[t._v("在规范的Processing model定义了event loop的循环过程：")]),t._v(" "),r("p",[t._v("一个event loop只要存在，就会不断执行下边的步骤：")]),t._v(" "),t._m(3),t._v(" "),r("p",[t._v("event loop会不断循环上面的步骤，概括说来：")]),t._v(" "),r("p",[t._v("event loop会不断循环的去取tasks队列的中最老的一个任务推入栈中执行，并在当次循环里依次执行并清空microtask队列里的任务。\n执行完microtask队列里的任务，有可能会渲染更新。（浏览器很聪明，在一帧以内的多次dom变动浏览器不会立即响应，而是会积攒变动以最高60HZ的频率更新视图）")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/aooy/blog/issues/5",target:"_blank",rel:"noopener noreferrer"}},[t._v("event-loop"),r("OutboundLink")],1)])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"事件循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件循环","aria-hidden":"true"}},[this._v("#")]),this._v(" 事件循环")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"microtask"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#microtask","aria-hidden":"true"}},[this._v("#")]),this._v(" microtask")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"处理过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#处理过程","aria-hidden":"true"}},[this._v("#")]),this._v(" 处理过程")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ol",[r("li",[t._v("在tasks队列中选择最老的一个task,用户代理可以选择任何task队列，如果没有可选的任务，则跳到下边的microtasks步骤。")]),t._v(" "),r("li",[t._v("将上边选择的task设置为正在运行的task。")]),t._v(" "),r("li",[t._v("Run: 运行被选择的task。")]),t._v(" "),r("li",[t._v("将event loop的currently running task变为null。")]),t._v(" "),r("li",[t._v("从task队列里移除前边运行的task。")]),t._v(" "),r("li",[t._v("Microtasks: 执行microtasks任务检查点。（也就是执行microtasks队列里的任务）")]),t._v(" "),r("li",[t._v("更新渲染（Update the rendering）...")]),t._v(" "),r("li",[t._v("如果这是一个worker event loop，但是没有任务在task队列中，并且WorkerGlobalScope对象的closing标识为true，则销毁event loop，中止这些步骤，然后进行定义在Web workers章节的run a worker。")]),t._v(" "),r("li",[t._v("返回到第一步。")])])}],!1,null,null,null);e.default=a.exports}}]);