(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{290:function(t,e,s){"use strict";s.r(e);var _=s(0),r=Object(_.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),s("p",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions",target:"_blank",rel:"noopener noreferrer"}},[t._v("匹配规则"),s("OutboundLink")],1)]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),s("p",[t._v("返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。如果是全局正则表达式，正则对象的lastIndex属性指向匹配的开始位置")]),t._v(" "),s("p",[t._v("数组信息：")]),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),s("p",[t._v("如果字符串 string 中含有与 RegExpObject 匹配的文本，则返回 true，否则返回 false。")]),t._v(" "),s("p",[t._v("该方法用来简单判断是否含有匹配的字符串，不能返回详细的匹配信息")]),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),s("p",[t._v("search() 方法不执行全局匹配，并且总是从字符串的开始进行检索，这意味着它总是返回 stringObject 的第一个匹配的位置，如果没有找到任何匹配的子串，则返回 -1")]),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),s("p",[t._v("全局匹配(g)")]),t._v(" "),s("p",[t._v("如果找到，则返回一个包含所有匹配结果的数组，否则返回 null")]),t._v(" "),s("p",[t._v("非全局匹配")]),t._v(" "),s("p",[t._v("如果找到，则返回一个和exec方法相同的的数组结构，否则返回 null")]),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),s("p",[t._v("replacement为字符串：")]),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),s("p",[t._v("replacement可以为函数，在这种情况下，每个匹配都调用该函数，它返回的字符串将作为替换文本使用。该函数的第一个参数是匹配模式的字符串。接下来的参数是与模式中的子表达式匹配的字符串，可以有 0 个或多个这样的参数。接下来的参数是一个整数，声明了匹配在 stringObject 中出现的位置。最后一个参数是 stringObject 本身。")]),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),s("p",[t._v("separator：分割模式，可以是子串或者正则")]),t._v(" "),s("p",[t._v("howmany：该参数可指定返回的数组的最大长度。")]),t._v(" "),t._m(21),t._v(" "),s("p",[t._v("功能：$1-$9存放着正则表达式中最近的9个正则表达式的匹配结果，这些结果按照子匹配的出现顺序依次排列")])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"正则匹配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#正则匹配","aria-hidden":"true"}},[this._v("#")]),this._v(" 正则匹配")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"匹配规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#匹配规则","aria-hidden":"true"}},[this._v("#")]),this._v(" 匹配规则")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"匹配方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#匹配方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 匹配方法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"正则实例的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#正则实例的方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 正则实例的方法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("exec")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("语法")]),this._v(" "),e("p",[this._v("RegExpObject.exec(string)")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("对象")]),t._v(" "),s("th",[t._v("属性或索引")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("array")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("匹配到的字符串和所有的子字符串")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td",[t._v("index")]),t._v(" "),s("td",[t._v("匹配文本的第一个字符的位置")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td",[t._v("input")]),t._v(" "),s("td",[t._v("初始字符串")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td",[t._v("[0]")]),t._v(" "),s("td",[t._v("匹配到的所有字符串（并不是匹配后记住的字符串）")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td",[t._v("[1]")]),t._v(" "),s("td",[t._v("匹配到的第1个子表达式相匹配的文本")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("注意")]),this._v(" "),e("p",[this._v("在调用非全局的 RegExp 对象的 exec() 方法时，返回的数组与调用方法 String.match() 返回的数组是相同的。")]),this._v(" "),e("p",[this._v("但是，当 RegExpObject 是一个全局正则表达式时，exec() 的行为就稍微复杂一些。它会在 RegExpObject 的 lastIndex 属性指定的字符处开始检索字符串 string。当 exec() 找到了与表达式相匹配的文本时，在匹配后，它将把 RegExpObject 的 lastIndex 属性设置为匹配文本的最后一个字符的下一个位置。这就是说，您可以通过反复调用 exec() 方法来遍历字符串中的所有匹配文本。当 exec() 再也找不到匹配的文本时，它将返回 null，并把 lastIndex 属性重置为 0。")]),this._v(" "),e("p",[this._v("如果在一个字符串中完成了一次模式匹配之后要开始检索新的字符串，就必须手动地把 lastIndex 属性重置为 0。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",{attrs:{start:"2"}},[e("li",[this._v("test")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("语法")]),this._v(" "),e("p",[this._v("RegExpObject.test(string)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"字符串的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串的方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 字符串的方法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("search")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("语法")]),this._v(" "),e("p",[this._v("stringObject.search(regexp)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",{attrs:{start:"2"}},[e("li",[this._v("match")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("语法")]),this._v(" "),e("p",[this._v("stringObject.match(str | regexp)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",{attrs:{start:"3"}},[e("li",[this._v("replace")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("语法")]),this._v(" "),e("p",[this._v("stringObject.replace(regexp/substr, replacement)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("replacement中的 "),e("strong",[this._v("&")]),this._v(" 的替换模式")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("字符")]),t._v(" "),s("th",[t._v("替换文本")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("$1、$2、...、$99")]),t._v(" "),s("td",[t._v("与 regexp 中的第 1 到第 99 个子表达式相匹配的文本")])]),t._v(" "),s("tr",[s("td",[t._v("$&")]),t._v(" "),s("td",[t._v("与 regexp 相匹配的子串")])]),t._v(" "),s("tr",[s("td",[t._v("$`")]),t._v(" "),s("td",[t._v("位于匹配子串左侧的文本")])]),t._v(" "),s("tr",[s("td",[t._v("$'")]),t._v(" "),s("td",[t._v("位于匹配子串右侧的文本")])]),t._v(" "),s("tr",[s("td",[t._v("$$")]),t._v(" "),s("td",[t._v("直接量符号")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",{attrs:{start:"4"}},[e("li",[this._v("split")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("语法")]),this._v(" "),e("p",[this._v("stringObject.split(separator, howmany)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"regexp-n"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#regexp-n","aria-hidden":"true"}},[this._v("#")]),this._v(" RegExp.$n")])}],!1,null,null,null);e.default=r.exports}}]);